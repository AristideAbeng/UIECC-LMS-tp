/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interface1;

import database.DBConnect;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.event.ListSelectionListener;
import lmsschoolproject.CD;
import lmsschoolproject.Livre;
import lmsschoolproject.ResearchMaterial;

/**
 *
 * @author AGIREM
 */
public class FenetreChoisirEmprunt extends javax.swing.JFrame {

    private static FenetreAcceuil mFenetreEmprunt; 
    private JPopupMenu popup;
    /**
     * Creates new form ChoisirEmprunt
     */
    public FenetreChoisirEmprunt(FenetreAcceuil fenetre) {
        initComponents();
        setLocationRelativeTo(null);
         this.mFenetreEmprunt = fenetre;
         //definir un Jlist qui va contenir tout les livres en recevant la liste cree par la methode creerListeLivres.
        JList<Livre> listeLivres = this.creerListeLivres();
        listeLivres.setSelectionBackground(Color.BLUE);
        listeLivres.setBackground(Color.gray);
       
        JList<CD> listeCD = this.creerListeCD();
       listeCD.setSelectionBackground(Color.BLUE);
        listeCD.setBackground(Color.gray);
        
        JList<ResearchMaterial> listeRSD = this.creerListeRSD();
        // ajouter un menu contextuel pour chaque liste
         listeLivres.addListSelectionListener(createLivreSelectionListener(listeLivres));
         
        listeCD.addListSelectionListener(createCDSelectionListener(listeCD));
         
       listeRSD.addListSelectionListener(createMDRSelectionListener(listeRSD));
        //definir le gestionaire d'affichage du panel des livres a BorderLayout
        this.livre.setLayout(new BorderLayout());
        this.cd.setLayout(new BorderLayout());
         this.mdr.setLayout(new BorderLayout());
        //ajouter la liste des livres au panel dans un JScrollPane en precisant qu'il doit etre au centre
        this.livre.add(new JScrollPane(listeLivres),BorderLayout.CENTER);
        this.cd.add(new JScrollPane(listeCD),BorderLayout.CENTER);
        this.mdr.add(new JScrollPane(listeRSD),BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        livre = new javax.swing.JPanel();
        cd = new javax.swing.JPanel();
        mdr = new javax.swing.JPanel();
        livreact = new javax.swing.JLabel();
        mdrdeact = new javax.swing.JLabel();
        mdract = new javax.swing.JLabel();
        cddact = new javax.swing.JLabel();
        cdact = new javax.swing.JLabel();
        livredeact = new javax.swing.JLabel();
        close = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Corbel", 1, 25)); // NOI18N
        jLabel1.setText("Choisir la Ressource Ã  Emprunter :");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, -1, 40));

        livre.setBackground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout livreLayout = new javax.swing.GroupLayout(livre);
        livre.setLayout(livreLayout);
        livreLayout.setHorizontalGroup(
            livreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 840, Short.MAX_VALUE)
        );
        livreLayout.setVerticalGroup(
            livreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );

        jPanel1.add(livre, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 840, 420));

        cd.setBackground(new java.awt.Color(255, 204, 204));

        javax.swing.GroupLayout cdLayout = new javax.swing.GroupLayout(cd);
        cd.setLayout(cdLayout);
        cdLayout.setHorizontalGroup(
            cdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 840, Short.MAX_VALUE)
        );
        cdLayout.setVerticalGroup(
            cdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );

        jPanel1.add(cd, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 840, 420));

        javax.swing.GroupLayout mdrLayout = new javax.swing.GroupLayout(mdr);
        mdr.setLayout(mdrLayout);
        mdrLayout.setHorizontalGroup(
            mdrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 840, Short.MAX_VALUE)
        );
        mdrLayout.setVerticalGroup(
            mdrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );

        jPanel1.add(mdr, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 840, 420));

        livreact.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/livreact_1.png"))); // NOI18N
        livreact.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        livreact.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                livreactMouseClicked(evt);
            }
        });
        jPanel1.add(livreact, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 70, 100, 30));

        mdrdeact.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/mdrdsct.png"))); // NOI18N
        mdrdeact.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        mdrdeact.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mdrdeactMouseClicked(evt);
            }
        });
        jPanel1.add(mdrdeact, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 70, 210, 30));

        mdract.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/mdract_1.png"))); // NOI18N
        mdract.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        mdract.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mdractMouseClicked(evt);
            }
        });
        jPanel1.add(mdract, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 60, -1, 50));

        cddact.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/cddsct.png"))); // NOI18N
        cddact.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cddact.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cddactMouseClicked(evt);
            }
        });
        jPanel1.add(cddact, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 70, -1, 30));

        cdact.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/cdact_1.png"))); // NOI18N
        cdact.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel1.add(cdact, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 70, -1, 30));

        livredeact.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/livredsct.png"))); // NOI18N
        livredeact.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        livredeact.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                livredeactMouseClicked(evt);
            }
        });
        jPanel1.add(livredeact, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 70, -1, -1));

        close.setFont(new java.awt.Font("Corbel", 1, 24)); // NOI18N
        close.setText("X");
        close.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeMouseExited(evt);
            }
        });
        jPanel1.add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 840, 540));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void livreactMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_livreactMouseClicked
        // TODO add your handling code here:
        livre.setVisible(true);
        mdr.setVisible(false);
        cd.setVisible(false);

    }//GEN-LAST:event_livreactMouseClicked

    private void mdrdeactMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mdrdeactMouseClicked
        // TODO add your handling code here:
        livreact.setVisible(false);
        livredeact.setVisible(true);
        mdract.setVisible(true);
        mdrdeact.setVisible(false);
        cddact.setVisible(true);
        cdact.setVisible(false);
        livre.setVisible(false);
        mdr.setVisible(true);
        cd.setVisible(false);
    }//GEN-LAST:event_mdrdeactMouseClicked

    private void mdractMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mdractMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_mdractMouseClicked

    private void cddactMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cddactMouseClicked
        // TODO add your handling code here:
        livreact.setVisible(false);
        livredeact.setVisible(true);
        mdract.setVisible(false);
        mdrdeact.setVisible(true);
        cddact.setVisible(false);
        cdact.setVisible(true);
        livre.setVisible(false);
        mdr.setVisible(false);
        cd.setVisible(true);
    }//GEN-LAST:event_cddactMouseClicked

    private void livredeactMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_livredeactMouseClicked
        // TODO add your handling code here:
        livreact.setVisible(true);
        livredeact.setVisible(false);
        mdract.setVisible(false);
        mdrdeact.setVisible(true);
        cddact.setVisible(true);
        cdact.setVisible(false);
        livre.setVisible(true);
        mdr.setVisible(false);
        cd.setVisible(false);
    }//GEN-LAST:event_livredeactMouseClicked

    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
        // TODO add your handling code here:
        
       this.setVisible(false);
       
    }//GEN-LAST:event_closeMouseClicked

    private void closeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseEntered
        // TODO add your handling code here:
        close.setForeground(Color.red);
    }//GEN-LAST:event_closeMouseEntered

    private void closeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseExited
        // TODO add your handling code here:
        close.setForeground(Color.black);
    }//GEN-LAST:event_closeMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FenetreChoisirEmprunt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FenetreChoisirEmprunt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FenetreChoisirEmprunt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FenetreChoisirEmprunt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FenetreChoisirEmprunt(null).setVisible(true);
            }
        });
    }
    
     private  ListSelectionListener createLivreSelectionListener(JList list) {
      return e -> {
          if (!e.getValueIsAdjusting()) {
              System.out.println(list.getSelectedValue());
              
              
        //instancier l'objet menu contextuel
       popup = new JPopupMenu();
        
        //ajouter des options au menu contextuel
       
        popup.add(new JMenuItem(new AbstractAction("selectioner"){
                  @Override
                  public void actionPerformed(ActionEvent e) {
                        int option = JOptionPane.showConfirmDialog(null,"Voulez vous vraiment selectioner ce livre ?");
                        System.out.println(option);
                        if(option == 0){
                               if(getFenetreEmprunter() != null){
                                   mFenetreEmprunt.getSelectedRessource((Livre)list.getSelectedValue(),"livre");
                                   mFenetreEmprunt.setVisible(true);
                                   closeWindow();
                               } 
                        }
                  }
        }));
        
         popup.show(list,list.getMousePosition().x,list.getMousePosition().y);
          }
      };
      
  }
     private  ListSelectionListener createCDSelectionListener(JList list) {
      return e -> {
          if (!e.getValueIsAdjusting()) {
              System.out.println(list.getSelectedValue());
              
              
        //instancier l'objet menu contextuel
       popup = new JPopupMenu();
        
        //ajouter des options au menu contextuel
        
        popup.add(new JMenuItem(new AbstractAction("selectioner"){
                  @Override
                  public void actionPerformed(ActionEvent e) {
                        int option = JOptionPane.showConfirmDialog(null,"Voulez vous vraiment selectioner ce CD ?");
                        System.out.println(option);
                        if(option == 0){
                               if(getFenetreEmprunter() != null){
                                   mFenetreEmprunt.getSelectedRessource((CD)list.getSelectedValue(),"cd");
                                   mFenetreEmprunt.setVisible(true);
                                   closeWindow();
                               } 
                        }
                  }
        }));
        
         popup.show(list,list.getMousePosition().x,list.getMousePosition().y);
          }
      };
      
  }
     
     private  ListSelectionListener createMDRSelectionListener(JList list) {
      return e -> {
          if (!e.getValueIsAdjusting()) {
              System.out.println(list.getSelectedValue());
              
              
        //instancier l'objet menu contextuel
       popup = new JPopupMenu();
        
        //ajouter des options au menu contextuel
        
        popup.add(new JMenuItem(new AbstractAction("selectioner"){
                  @Override
                  public void actionPerformed(ActionEvent e) {
                        int option = JOptionPane.showConfirmDialog(null,"Voulez vous vraiment selectioner ce Magazine ?");
                        System.out.println(option);
                        if(option == 0){
                               if(getFenetreEmprunter() != null){
                                   mFenetreEmprunt.getSelectedRessource((ResearchMaterial)list.getSelectedValue(),"rsd");
                                   mFenetreEmprunt.setVisible(true);
                                   closeWindow();
                               } 
                        }
                  }
        }));
        
         popup.show(list,list.getMousePosition().x,list.getMousePosition().y);
          }
      };
      
  }
    private static  FenetreAcceuil getFenetreEmprunter(){
        return mFenetreEmprunt;
    }
    private void closeWindow(){
        this.setVisible(false);
    }
    
     private JList<Livre> creerListeLivres() {
    // create List model
    DefaultListModel<Livre> model = new DefaultListModel<Livre>();
    // add item to model
    List<Livre> listeLivres = new ArrayList<>();
    try{
        //se connecter a la bd pour extraire tout les livres enregistrees
          Connection con = DBConnect.connect();
          //preparer la requete sql
           Statement st = con.createStatement();
           String sql = "select * from livre";
                          
            //executer la requete pour stocker le resultat dans la variable resultat              
           ResultSet resultat = st.executeQuery(sql);
                          //une boucle while pour parcourir tout les livres dans resultat                       
                          while(resultat.next()){
                                String titre = resultat.getString("Titre");  
                                String auteur = resultat.getString("Auteur");  
                                java.sql.Date datePublication = resultat.getDate("DatePublication");
                                java.util.Date utilDate = new java.util.Date(datePublication.getTime());
                                int nbExemplaire = resultat.getInt("NombreDexemplaires");
                                int nbPages = resultat.getInt("nbPage");
                                String maisonEdition = resultat.getString("MaisonEdition");
                                String edition = resultat.getString("edition");
                                String positionement = resultat.getString("Positionement");
                                String nomImage = resultat.getString("nomImage");
                                String categorie = resultat.getString("Stylecategorie");
                                int id = resultat.getInt("id");
                                
                                // creer un objet livre a partir des informations extraites de la variable resultat
                                Livre livre = new Livre(titre,auteur,utilDate,nbExemplaire,
                                nbPages,maisonEdition,edition,positionement,nomImage,categorie,id);
                                
                                //ajouter ce livre a la liste de livres
                                listeLivres.add(livre);
                          }
                          //ajouter la liste des livres au model du JList. cet a dire l'objet qui dit au JList quoi afficher.
                          model.addAll(listeLivres);
        //fermer la connexion quand je fini de tout extraire
       con.close();                   
       
       
    }catch(Exception e){
        System.out.println("erreur connexion a la bd");
    }
   
    // creer un objet liste en lui passant en parametre l'objet model qui a recu tout les livres.
    JList<Livre> list = new JList<Livre>(model);
    
    // definir comment est ce que les elements de la liste devront etre afficher en passant en parametre un instance de LivreRenderer
    list.setCellRenderer(new LivreRenderer());
    return list;
   }
 private JList<CD> creerListeCD() {
    // create List model
    DefaultListModel<CD> model = new DefaultListModel<CD>();
    // add item to model
    List<CD> listeCD = new ArrayList<>();
    try{
        //se connecter a la bd pour extraire tout les livres enregistrees
          Connection con = DBConnect.connect();
          //preparer la requete sql
           Statement st = con.createStatement();
           String sql = "select * from cd";
                          
            //executer la requete pour stocker le resultat dans la variable resultat              
           ResultSet resultat = st.executeQuery(sql);
                          //une boucle while pour parcourir tout les livres dans resultat                       
                          while(resultat.next()){
                                String titre = resultat.getString("Titre");  
                                String auteur = resultat.getString("Auteur");  
                                java.sql.Date datePublication = resultat.getDate("DatePublication");
                                java.util.Date utilDate = new java.util.Date(datePublication.getTime());
                                int nbExemplaire = resultat.getInt("NombreDexemplaires");
                                java.sql.Time duree = resultat.getTime("duree");
                                String maisonEdition = resultat.getString("MaisonEdition");
                                String positionement = resultat.getString("Positionement");
                                int taille=resultat.getInt("taille");
                                String nomImage = resultat.getString("nomImage");
                                int id = resultat.getInt("identifiant");
                                
                                // creer un objet livre a partir des informations extraites de la variable resultat
                                CD cd = new CD(titre,auteur,utilDate,nbExemplaire,duree,maisonEdition,positionement,taille,nomImage,id);
                                
                                //ajouter ce livre a la liste de livres
                                listeCD.add(cd);
                          }
                          //ajouter la liste des livres au model du JList. cet a dire l'objet qui dit au JList quoi afficher.
                          model.addAll(listeCD);
        //fermer la connexion quand je fini de tout extraire
       con.close();                   
       
       
    }catch(Exception e){
        System.out.println("erreur connexion a la bd");
    }
   
    // creer un objet liste en lui passant en parametre l'objet model qui a recu tout les livres.
    JList<CD> list = new JList<CD>(model);
    
    // definir comment est ce que les elements de la liste devront etre afficher en passant en parametre un instance de LivreRenderer
    list.setCellRenderer(new CDRenderer());
    return list;
 }
 
 private JList<ResearchMaterial> creerListeRSD() {
    // create List model
    DefaultListModel<ResearchMaterial> model = new DefaultListModel<ResearchMaterial>();
    // add item to model
    List<ResearchMaterial> listeRSD = new ArrayList<>();
    try{
        //se connecter a la bd pour extraire tout les livres enregistrees
          Connection con = DBConnect.connect();
          //preparer la requete sql
           Statement st = con.createStatement();
           String sql = "select * from rsd";
                          
            //executer la requete pour stocker le resultat dans la variable resultat              
           ResultSet resultat = st.executeQuery(sql);
                          //une boucle while pour parcourir tout les livres dans resultat                       
                          while(resultat.next()){
                               
                                String titre = resultat.getString("Titre");  
                                String auteur = resultat.getString("Auteur");  
                                java.sql.Date datePublication = resultat.getDate("DatePublication");
                                java.util.Date utilDate = new java.util.Date(datePublication.getTime());
                                int nbExemplaire = resultat.getInt("NombreDexemplaires");
                                String maisonEdition = resultat.getString("MaisonEdition");
                                String positionement = resultat.getString("Positionement");
                                String nomImage = resultat.getString("nomImage");
                                int id = resultat.getInt("identifiant");
                                
                                // creer un objet livre a partir des informations extraites de la variable resultat
                                ResearchMaterial rsd = new ResearchMaterial(titre,auteur,utilDate,nbExemplaire,maisonEdition,positionement,nomImage,id);
                                
                                //ajouter ce livre a la liste de livres
                                listeRSD.add(rsd);
                          

                          }
                          //ajouter la liste des livres au model du JList. cet a dire l'objet qui dit au JList quoi afficher.
                          model.addAll(listeRSD);
        //fermer la connexion quand je fini de tout extraire
       con.close();                   
       
       
    }catch(Exception e){
        System.out.println("erreur connexion a la bd"+e);
    }
   
    // creer un objet liste en lui passant en parametre l'objet model qui a recu tout les livres.
    JList<ResearchMaterial> list = new JList<ResearchMaterial>(model);
    
    // definir comment est ce que les elements de la liste devront etre afficher en passant en parametre un instance de LivreRenderer
    list.setCellRenderer(new RSDRenderer());
    return list;
 }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cd;
    private javax.swing.JLabel cdact;
    private javax.swing.JLabel cddact;
    private javax.swing.JLabel close;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel livre;
    private javax.swing.JLabel livreact;
    private javax.swing.JLabel livredeact;
    private javax.swing.JPanel mdr;
    private javax.swing.JLabel mdract;
    private javax.swing.JLabel mdrdeact;
    // End of variables declaration//GEN-END:variables
}
