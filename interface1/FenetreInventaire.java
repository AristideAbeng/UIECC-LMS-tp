/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interface1;

import database.DBConnect;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.event.ListSelectionListener;
import lmsschoolproject.CD;
import lmsschoolproject.Livre;
import lmsschoolproject.ResearchMaterial;

/**
 *
 * @author KIBITI Wen Life
 */
public class FenetreInventaire extends javax.swing.JFrame {

    private static String mCurrentAuthorConstraint = "All";
    private static String mCurrentPubCompanyConstraint = "All";
    private static String mSearchCriteria = "";
     private static JPopupMenu popup;//declarer le menu contextuel
     private static int counter = -1;
     private JList<Livre> listeLivres;
     private JList<CD> listeCD;
     private JList<ResearchMaterial> listeMR;
    /**
     * Creates new form FenetreInventaire
     */
    public FenetreInventaire() {
        initComponents();
        
        //definir un Jlist qui va contenir tout les livres en recevant la liste cree par la methode creerListeLivres.
        fillAuthors();
        fillPublishingCompanies();
        loadRessources(true);
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        cbbx_authors = new javax.swing.JComboBox<>();
        cbbx_publishingCompanies = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_searchfield = new javax.swing.JTextField();
        search_btn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 928, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 576, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("CD", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 928, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 576, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("MDR", jPanel3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 928, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 576, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("livres", jPanel1);

        cbbx_authors.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", " ", " " }));
        cbbx_authors.setBorder(null);
        cbbx_authors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbx_authorsActionPerformed(evt);
            }
        });

        cbbx_publishingCompanies.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", " ", " " }));
        cbbx_publishingCompanies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbx_publishingCompaniesActionPerformed(evt);
            }
        });

        jLabel1.setText("Select author to sort items");

        jLabel2.setText("Select publishing company to sort items");

        search_btn.setText("search");
        search_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_btnActionPerformed(evt);
            }
        });

        jLabel3.setText("enter a book name and search");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(cbbx_authors, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(txt_searchfield, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(search_btn)
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(354, 354, 354)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(cbbx_publishingCompanies, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbx_authors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbx_publishingCompanies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_searchfield, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbbx_authorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbx_authorsActionPerformed
        // TODO add your handling code here:
        counter++;
        mCurrentAuthorConstraint = this.cbbx_authors.getSelectedItem().toString();
        mCurrentPubCompanyConstraint = this.cbbx_publishingCompanies.getSelectedItem().toString();
         this.txt_searchfield.setText("");
        if(counter>0){
            System.out.println("counter is "+counter);
           loadRessources(true); 
        }
        
    }//GEN-LAST:event_cbbx_authorsActionPerformed

    private void cbbx_publishingCompaniesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbx_publishingCompaniesActionPerformed
        // TODO add your handling code here:
        counter++;
        mCurrentAuthorConstraint = this.cbbx_authors.getSelectedItem().toString();
        mCurrentPubCompanyConstraint = this.cbbx_publishingCompanies.getSelectedItem().toString();
        this.txt_searchfield.setText("");
        if(counter>0){
            System.out.println("counter is "+counter);
           loadRessources(true); 
        }
    }//GEN-LAST:event_cbbx_publishingCompaniesActionPerformed

    private void search_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_btnActionPerformed
        // TODO add your handling code here:
        //this.cbbx_authors.setSelectedIndex(0);
        //this.cbbx_publishingCompanies.setSelectedIndex(0);
        mSearchCriteria = this.txt_searchfield.getText();
        if(counter>0){
            System.out.println("counter is "+counter);
           loadRessources(false); 
        }
    }//GEN-LAST:event_search_btnActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FenetreInventaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FenetreInventaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FenetreInventaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FenetreInventaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FenetreInventaire().setVisible(true);
            }
        });
    }
    
    private void loadRessources(boolean noSearch){
        
                 listeLivres = this.creerListeLivres(noSearch);

                listeLivres.setSelectionBackground(Color.BLUE);
                listeLivres.setBackground(Color.white);

                listeCD = this.creerListeCD(noSearch);

                //listeRSD = this.creerListeRSD(mCurrentAuthorConstraint,mCurrentPubCompanyConstraint);
                // ajouter un menu contextuel pour chaque liste
        
                 listeLivres.addListSelectionListener(createLivreSelectionListener(listeLivres));

                 listeCD.addListSelectionListener(createCDSelectionListener(listeCD));

                // listeRSD.addListSelectionListener(createRSDSelectionListener(listeRSD));
                //definir le gestionaire d'affichage du panel des livres a BorderLayout
                this.jPanel1.removeAll();
                this.jPanel2.removeAll();
                this.jPanel3.removeAll();
                this.jPanel1.setLayout(new BorderLayout());
                this.jPanel2.setLayout(new BorderLayout());
                 this.jPanel3.setLayout(new BorderLayout());
                //ajouter la liste des livres au panel dans un JScrollPane en precisant qu'il doit etre au centre
                this.jPanel1.add(new JScrollPane(listeLivres),BorderLayout.CENTER);
                this.jPanel2.add(new JScrollPane(listeCD),BorderLayout.CENTER);
               // this.jPanel3.add(new JScrollPane(listeRSD),BorderLayout.CENTER);
               this.jPanel1.revalidate();
               this.jPanel1.updateUI();
               this.jPanel2.revalidate();
               this.jPanel2.updateUI();
               this.jPanel3.revalidate();
               this.jPanel3.updateUI();
              
    }
    private void fillAuthors(){
        System.out.println("fill authors called");
        List<String> bookAuthors = Livre.getAllAuthors();
        bookAuthors.add(0, "All");
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel();
        model.addAll(bookAuthors);
        this.cbbx_authors.setModel(model);
        this.cbbx_authors.setSelectedIndex(0);
    }
    private void fillPublishingCompanies(){
                System.out.println("fill authors called");

        List<String> booksPublishingCompanies = Livre.getAllPublishingCompanies();
        booksPublishingCompanies.add(0,"All");
         DefaultComboBoxModel<String> model = new DefaultComboBoxModel();
        model.addAll(booksPublishingCompanies);
        this.cbbx_publishingCompanies.setModel(model);
        this.cbbx_publishingCompanies.setSelectedIndex(0);
    }
    private static ListSelectionListener createRSDSelectionListener(JList list){
        return null;
    }
    private static ListSelectionListener createLivreSelectionListener(JList list) {
      return e -> {
          if (!e.getValueIsAdjusting()) {
              System.out.println(list.getSelectedValue());
              
              
        //instancier l'objet menu contextuel
       popup = new JPopupMenu();
        
        //ajouter des options au menu contextuel
        popup.add(new JMenuItem(new AbstractAction("details"){
                  @Override
                  public void actionPerformed(ActionEvent e) {
                     // FenetreModifierLivre fenetre = new FenetreModifierLivre((Livre)list.getSelectedValue());
                      // fenetre.setVisible(true);
                      
                  }
        }));
        popup.add(new JMenuItem(new AbstractAction("supprimer"){
                  @Override
                  public void actionPerformed(ActionEvent e) {
                        int option = JOptionPane.showConfirmDialog(null,"Voulez vous vraiment supprimer ce livre ?");
                        System.out.println(option);
                        if(option == 0){
                                try{

                                        Connection con = DBConnect.connect();
                                       String insertQuery = "DELETE FROM  livre WHERE Id = ?";

                                     PreparedStatement requeteInsertion = con.prepareStatement(insertQuery);
                                     Livre livre = (Livre)list.getSelectedValue();
                                      requeteInsertion.setInt(1,livre.id);


                                      requeteInsertion.execute();
                                      JOptionPane.showMessageDialog(null, "Suprimee avec success");

                                      con.close();
                              }catch(Exception exc){
                                  System.out.println(exc);
                              }
                        }
                  }
        }));
        
         popup.show(list,list.getMousePosition().x,list.getMousePosition().y);
          }
      };
      
  }
   private static ListSelectionListener createCDSelectionListener(JList list) {
      return e -> {
          if (!e.getValueIsAdjusting()) {
              System.out.println(list.getSelectedValue());
              
              
        //instancier l'objet menu contextuel
       popup = new JPopupMenu();
        
        //ajouter des options au menu contextuel
        popup.add(new JMenuItem("details"));
        popup.add(new JMenuItem("modifier"));
        popup.add(new JMenuItem("supprimer"));
        
         popup.show(list,list.getMousePosition().x,list.getMousePosition().y);
          }
      };
      
  }

   private JList<Livre> creerListeLivres(boolean noSearch) {
    // create List model
    DefaultListModel<Livre> model = new DefaultListModel<Livre>();
    // add item to model
    List<Livre> listeLivres = new ArrayList<>();
    try{
        //se connecter a la bd pour extraire tout les livres enregistrees
          Connection con = DBConnect.connect();
          //preparer la requete sql
           Statement st = con.createStatement();
           String sql = "select * from livre";
           if(noSearch){
           if(!mCurrentAuthorConstraint.equalsIgnoreCase("All")){
               sql = "SELECT * FROM livre WHERE Auteur = '"+mCurrentAuthorConstraint+"'";
               if(!mCurrentPubCompanyConstraint.equalsIgnoreCase("All")){
                    sql = "SELECT * FROM livre WHERE Auteur = '"+mCurrentAuthorConstraint+"' AND MaisonEdition = '"+mCurrentPubCompanyConstraint+"'";
               }
           }else if(!mCurrentPubCompanyConstraint.equalsIgnoreCase("All")){
               
                sql = "SELECT * FROM livre WHERE MaisonEdition = '"+mCurrentPubCompanyConstraint+"'";
           }
           }else{
               sql = "SELECT * FROM livre WHERE Titre LIKE '%"+mSearchCriteria+"%'";
           }
           System.out.println(sql);           
            //executer la requete pour stocker le resultat dans la variable resultat              
           ResultSet resultat = st.executeQuery(sql);
                          //une boucle while pour parcourir tout les livres dans resultat                       
                          while(resultat.next()){
                                String titre = resultat.getString("Titre");  
                                String auteur = resultat.getString("Auteur");  
                                java.sql.Date datePublication = resultat.getDate("DatePublication");
                                java.util.Date utilDate = new java.util.Date(datePublication.getTime());
                                int nbExemplaire = resultat.getInt("NombreDexemplaires");
                                int nbPages = resultat.getInt("nbPage");
                                String maisonEdition = resultat.getString("MaisonEdition");
                                String edition = resultat.getString("edition");
                                String positionement = resultat.getString("Positionement");
                                String nomImage = resultat.getString("nomImage");
                                String categorie = resultat.getString("Stylecategorie");
                                int id = resultat.getInt("id");
                                
                                // creer un objet livre a partir des informations extraites de la variable resultat
                                Livre livre = new Livre(titre,auteur,utilDate,nbExemplaire,
                                nbPages,maisonEdition,edition,positionement,nomImage,categorie,id);
                                
                                //ajouter ce livre a la liste de livres
                                listeLivres.add(livre);
                          }
                          //ajouter la liste des livres au model du JList. cet a dire l'objet qui dit au JList quoi afficher.
                          model.addAll(listeLivres);
        //fermer la connexion quand je fini de tout extraire
       con.close();                   
       
       
    }catch(Exception e){
        System.out.println("erreur connexion a la bd"+e);
    }
   
    // creer un objet liste en lui passant en parametre l'objet model qui a recu tout les livres.
    JList<Livre> list = new JList<Livre>(model);
    
    // definir comment est ce que les elements de la liste devront etre afficher en passant en parametre un instance de LivreRenderer
    list.setCellRenderer(new LivreRenderer());
    return list;
   }
 private JList<CD> creerListeCD(boolean noSearch) {
    // create List model
    DefaultListModel<CD> model = new DefaultListModel<CD>();
    // add item to model
    List<CD> listeCD = new ArrayList<>();
    try{
        //se connecter a la bd pour extraire tout les livres enregistrees
          Connection con = DBConnect.connect();
          //preparer la requete sql
           Statement st = con.createStatement();
           String sql = "select * from cd";
           if(noSearch){
           if(!mCurrentAuthorConstraint.equalsIgnoreCase("All")){
               sql = "SELECT * FROM cd WHERE Auteur = '"+mCurrentAuthorConstraint+"'";
               if(!mCurrentPubCompanyConstraint.equalsIgnoreCase("All")){
                    sql = "SELECT * FROM cd WHERE Auteur = '"+mCurrentAuthorConstraint+"' AND MaisonEdition = '"+mCurrentPubCompanyConstraint+"'";
               }
           }else if(!mCurrentPubCompanyConstraint.equalsIgnoreCase("All")){
               
                sql = "SELECT * FROM cd WHERE MaisonEdition = '"+mCurrentPubCompanyConstraint+"'";
           }
           }else{
                sql = "SELECT * FROM cd WHERE Titre LIKE '%"+mSearchCriteria+"%'";
           }
           System.out.println(sql);  
                          
            //executer la requete pour stocker le resultat dans la variable resultat              
           ResultSet resultat = st.executeQuery(sql);
                          //une boucle while pour parcourir tout les livres dans resultat                       
                          while(resultat.next()){
                                String titre = resultat.getString("Titre");  
                                String auteur = resultat.getString("Auteur");  
                                java.sql.Date datePublication = resultat.getDate("DatePublication");
                                java.util.Date utilDate = new java.util.Date(datePublication.getTime());
                                int nbExemplaire = resultat.getInt("NombreDexemplaires");
                                java.sql.Time duree = resultat.getTime("duree");
                                String maisonEdition = resultat.getString("MaisonEdition");
                                String positionement = resultat.getString("Positionement");
                                int taille=resultat.getInt("taille");
                                String nomImage = resultat.getString("nomImage");
                                int id = resultat.getInt("identifiant");
                                
                                // creer un objet livre a partir des informations extraites de la variable resultat
                                CD cd = new CD(titre,auteur,utilDate,nbExemplaire,duree,maisonEdition,positionement,taille,nomImage,id);
                                
                                //ajouter ce livre a la liste de livres
                                listeCD.add(cd);
                          }
                          //ajouter la liste des livres au model du JList. cet a dire l'objet qui dit au JList quoi afficher.
                          model.addAll(listeCD);
        //fermer la connexion quand je fini de tout extraire
       con.close();                   
       
       
    }catch(Exception e){
        System.out.println("erreur connexion a la bd"+e);
    }
   
    // creer un objet liste en lui passant en parametre l'objet model qui a recu tout les livres.
    JList<CD> list = new JList<CD>(model);
    
    // definir comment est ce que les elements de la liste devront etre afficher en passant en parametre un instance de LivreRenderer
    list.setCellRenderer(new CDRenderer());
    return list;
 }
    private JList<ResearchMaterial> creerListeRSD(boolean noSearch) {
    // create List model
    DefaultListModel<ResearchMaterial> model = new DefaultListModel<ResearchMaterial>();
    // add item to model
    List<ResearchMaterial> listeRSD = new ArrayList<>();
    try{
        //se connecter a la bd pour extraire tout les livres enregistrees
          Connection con = DBConnect.connect();
          //preparer la requete sql
           Statement st = con.createStatement();
           
           String sql = "select * from rsd";
           if(noSearch){
           if(!mCurrentAuthorConstraint.equalsIgnoreCase("All")){
               sql = "SELECT * FROM rsd WHERE Auteur = '"+mCurrentAuthorConstraint+"'";
               if(!mCurrentPubCompanyConstraint.equalsIgnoreCase("All")){
                    sql = "SELECT * FROM rsd WHERE Auteur = '"+mCurrentAuthorConstraint+"' AND MaisonEdition = '"+mCurrentPubCompanyConstraint+"'";
               }
           }else if(!mCurrentPubCompanyConstraint.equalsIgnoreCase("All")){
               
                sql = "SELECT * FROM rsd WHERE MaisonEdition = '"+mCurrentPubCompanyConstraint+"'";
           }
           }else{
                sql = "SELECT * FROM rsd WHERE Titre LIKE '%"+mSearchCriteria+"%'";
           }
           System.out.println(sql);  
                          
            //executer la requete pour stocker le resultat dans la variable resultat              
           ResultSet resultat = st.executeQuery(sql);
                          //une boucle while pour parcourir tout les materiels de recherche dans resultat                       
                          while(resultat.next()){
                                String titre = resultat.getString("Titre");  
                                String auteur = resultat.getString("Auteur");  
                                java.sql.Date datePublication = resultat.getDate("DatePublication");
                                java.util.Date utilDate = new java.util.Date(datePublication.getTime());
                                int nbExemplaire = resultat.getInt("NombreDexemplaires");
                                String maisonEdition = resultat.getString("MaisonEdition");
                                String positionement = resultat.getString("Positionement");
                                String nomImage = resultat.getString("nomImage");
                                int id = resultat.getInt("identifiant");
                                
                                // creer un objet livre a partir des informations extraites de la variable resultat
                                ResearchMaterial rsd = new ResearchMaterial(titre,auteur,utilDate,nbExemplaire,maisonEdition,positionement,nomImage,id);
                                
                                //ajouter ce livre a la liste de livres
                                listeRSD.add(rsd);
                          }
                          //ajouter la liste des livres au model du JList. cet a dire l'objet qui dit au JList quoi afficher.
                          model.addAll(listeRSD);
        //fermer la connexion quand je fini de tout extraire
       con.close();                   
       
       
    }catch(Exception e){
        System.out.println("erreur connexion a la bd");
    }
   
    // creer un objet liste en lui passant en parametre l'objet model qui a recu tout les livres.
    JList<ResearchMaterial> list = new JList<ResearchMaterial>(model);
    
    // definir comment est ce que les elements de la liste devront etre afficher en passant en parametre un instance de LivreRenderer
    list.setCellRenderer(new RSDRenderer());
    return list;
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbbx_authors;
    private javax.swing.JComboBox<String> cbbx_publishingCompanies;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton search_btn;
    private javax.swing.JTextField txt_searchfield;
    // End of variables declaration//GEN-END:variables
}
